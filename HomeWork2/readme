1. Циклы. Преобразование строки в число.

    1.1. Перемножить числа от 1 до числа (включительно) введенного через аргумент к исполняемой программе.
    Есть нюанс с переполнением, можно добавить проверки и сообщения пользователю.
    Пример: Ввели 5, должно получиться в консоли: 1 * 2 * 3 * 4 * 5 = ответ
        1.1.1. Используя только цикл
        HomeWork2/loops/MultiplyFact1.java
        1.1.2.* Используя рекурсию
         HomeWork2/loops/MultiplyFact2.java

    1.2. Все цифры из числа введенного через аргумент к исполняемой программе перемножить между собой и
    вывести ход вычислений в консоль. Пользователь обязан ввести целое число.
    Если ввели не целое то выдать сообщение о том что пользователь ввёл некорректные данные.
    HomeWork2/loops/MultiplyNum.java

    1.3. Возведение в степень. Через консоль пользователь вводит два числа. Первое число это число
    которое мы будем возводить, Второе число это степень в которую возводят первое число. Степень -
    только положительная и целая. Возводимое число - может быть отрицательным и оно будет дробным.
    Math использовать нельзя.
    HomeWork2/loops/Exponent.java

    1.4.* Умножать число long a = 1; пока не произойдёт переполнение. В конце в консоль вывести сообщение
    со значением до переполнения и после переполнения. Умножать на:
    	1.4.1. 3
    	1.4.2. 188
    	1.4.3. -19
    	1.4.4. Да и вообще на любое целочисленное
    HomeWork2/loops/OverLong.java

    1.5. Вывести таблицу умножения в консоль. В консоли должно получиться также как и на картинке:
    https://www.dropbox.com/s/ibakfuppvy2w32g/multiplication_table.jpeg?dl=0
    HomeWork2/loops/MultiTab.java

    2.1. Создать класс ArraysUtils:
    	2.1.1. Написать метод public static int[] arrayFromConsole() рядом с main.
    	Данный метод размер массива и каждый его элемент запрашивает у пользователя через консоль.

    	2.1.2. Написать метод public static int[] arrayRandom(int size, int maxValueExclusion) рядом с main.
    	Данный метод принимает два аргумента. Первый (size) указывает размер массива который мы хотим получить.
    	Второй (maxValueExclusion) указывает до какого числа генерировать рандомные числа.
    HomeWork2/arrays/ArraysUtils.java

    2.2 Перебор массива при помощи do....while, while, for, foreach. Элементы массива вводить используя ранее
    созданный arrayFromConsole. Все задачи в одном классе, в отдельных методах. Должно получиться 3 метода:
		2.2.1. Вывести все элементы в консоль.
		2.2.2. Вывести каждый второй элемент массива в консоль.
		2.2.3. Вывести все элементы массива в консоль в обратном порядке.
    HomeWork2/arrays/ArraysRun.java

    2.3* Выполнить задание 2.2 иным способом. Создать интерфейс IArraysOperation с методами из задания.
    Написать 4 отдельных класса и реализовать данный интерфейс:
    	2.3.1. DoWhileOperation - во всех методах можно использовать только do....while
    	HomeWork2/arrays/ArraysRun_1/DoWhileOperation.java
    	2.3.2. WhileOperation - во всех методах можно использовать только while
    	HomeWork2/arrays/ArraysRun_1/WhileOperation.java
    	2.3.3. ForOperation - во всех методах можно использовать только for
    	HomeWork2/arrays/ArraysRun_1/ForOperation.java
    	2.3.4. ForEachOperation - во всех методах можно использовать только foreach
    	HomeWork2/arrays/ArraysRun_1/ForEachOperation.java
    HomeWork2/arrays/ArraysRun_1/IArraysOperation.java
    HomeWork2/arrays/ArraysRun_1/ArrMain.java

    2.4 Все задачи в одном классе, в отдельных методах. Для создания массивов использовать ранее созданный arrayRandom.
        2.4.1. Сумма четных положительных элементов массива
        2.4.2. Максимальный из элементов массива с четными индексами
        2.4.3. Элементы массива, которые меньше среднего арифметического
        2.4.4. Найти два наименьших (минимальных) элемента массива
        2.4.5. Сжать массив, удалив элементы, принадлежащие интервалу
        2.4.6. Сумма цифр массива
    HomeWork2/arrays/ArrayTasks.java

    3. Нарисовать блок схему алгоритма работы пузырьковой сортировки.
    Результат должен быть в гите. Сохранить следующие форматы файлов: (.drawio || .vsdx) && (.pdf || .svg)
    diagram/bubble-sorting (1).pdf
    diagram/bubble-sorting (1).vsdx

     4.* Выполнить сортировку массива с числами:
         4.1. После каждой сортировки в консоли у вас должно получиться
         "[Какой массив был до сортировки] -> [Каким стал массив после сортировки]".
         Для преобразования массива в текст можно использовать класс Arrays.
         4.2. Создать класс SortsUtils. Пишем в нём следующие алгоритмы:
              4.2.1. Пузырьковая сортировка
              4.2.2. Шейкерная сортировка
         4.3. Для тестов используем предварительно созданные массивы (в коде ваши тесты должны остаться):
              4.3.1. {1,2,3,4,5,6}
              4.3.2. {1,1,1,1}
              4.3.3. {9,1,5,99,9,9}
              4.3.4. {}
         4.4. После тестов написать код который будет массив через ранее созданный arrayRandom. Отсортировать.
         4.5. После рандома написать код который будет создавать массив через ранее созданный arrayFromConsole.
         Отсортировать.
     HomeWork2/arrays/SortUtils.java
